// Generated by CoffeeScript 1.6.1
/*

	Data Driven Template(s)
	
	This is to help front end developers, define views with objects and templates
	and the view automatically re-render that view if the data inside of it changes.
	
	There are probably a few out there that do this, but this class uses Request Animation Frame
	to re-render all changes on a animation frame, so changing 5 attributes at once, wont trigger
	5 renders, it will trigger a render on the next animation frame. This speeds up rendering and 
	cuts back on un-needed renders dramatically.
	
	Created by: Quinton Pike
	Email: qrpike@gmail.com
*/

var _this = this,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.DataDrivenTemplate = (function(_super) {

  __extends(DataDrivenTemplate, _super);

  /*
  	
  		Constructor for auto-rendering element:
  		
  		@param {Object} dataObject - Data which we are going to watch for changes, this is also passed into the template function.
  		@param {Function} template - Template function which renders the HTML form the @dataObject
  		@param {Object} container - DOM Element where this template is to render inside of. 
  		@param {Object} options - Options we want to change from default settings.
  */


  function DataDrivenTemplate(dataObject, template, container, options) {
    var _this = this;
    this.dataObject = dataObject;
    this.template = template;
    this.container = container;
    this.options = options != null ? options : {};
    this.render = function() {
      return DataDrivenTemplate.prototype.render.apply(_this, arguments);
    };
    this.reRender = function() {
      return DataDrivenTemplate.prototype.reRender.apply(_this, arguments);
    };
    this.createWatcher = function() {
      return DataDrivenTemplate.prototype.createWatcher.apply(_this, arguments);
    };
    this.autoRender = this.options.autoRender || true;
    this.append = this.options.appendOnInitialRender || true;
    this.renderOnInit = this.options.renderOnInit || true;
    this.el = null;
    if (this.autoRender) {
      this.createWatcher();
    }
    if (this.renderOnInit) {
      this.render();
    }
    this.needToRender = false;
  }

  DataDrivenTemplate.prototype.createWatcher = function() {
    var _this = this;
    return WatchJS.watch(this.dataObject, function() {
      /* 
      				If something changes, we set @needToRender = true.
      				The way we trigger a render is to just set this to TRUE. Once
      				we set this to true, next frame refresh on the browser it will render. 
      				This helps align the renders with the browsers refresh = better performance.
      */
      return _this.needToRender = true;
    });
  };

  DataDrivenTemplate.prototype.reRender = function() {
    var oldEl;
    if (this.needToRender) {
      oldEl = this.container.find(this.el);
      this.el = $(this.template(this));
      oldEl.replaceWith(this.el);
      this.emit('render', {
        el: this.el,
        rerender: true
      });
      this.needToRender = false;
    }
    /*
    			Loop this function every animation requested. Only do something when 
    			we actually need to render something again.
    */

    return window.requestAnimFrame(this.reRender);
  };

  DataDrivenTemplate.prototype.render = function() {
    this.el = $(this.template(this));
    if (this.append) {
      this.container.append(this.el);
    } else {
      this.container.html(this.el);
    }
    this.emit('render', {
      el: this.el,
      rerender: false
    });
    return this.reRender();
  };

  return DataDrivenTemplate;

})(window.EventEmitter);
